// This file is @generated by prost-build.
/// Asset match information from Go asset detector
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AssetMatch {
    /// BTC, AAPL, etc.
    #[prost(string, tag = "1")]
    pub symbol: ::prost::alloc::string::String,
    /// Bitcoin, Apple Inc.
    #[prost(string, tag = "2")]
    pub name: ::prost::alloc::string::String,
    /// crypto, stock, etf, monetary, economic, geopolitical
    #[prost(string, tag = "3")]
    pub r#type: ::prost::alloc::string::String,
    /// Detection confidence 0.0-1.0
    #[prost(double, tag = "4")]
    pub confidence: f64,
    /// Context snippets around matches
    #[prost(string, repeated, tag = "5")]
    pub contexts: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
/// News event from Go finmedia service with complete asset detection
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NewsEvent {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub title: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub content: ::prost::alloc::string::String,
    /// RFC3339 timestamp
    #[prost(string, tag = "4")]
    pub published_at: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub source: ::prost::alloc::string::String,
    #[prost(string, tag = "6")]
    pub url: ::prost::alloc::string::String,
    /// Asset detection results
    #[prost(message, repeated, tag = "7")]
    pub assets: ::prost::alloc::vec::Vec<AssetMatch>,
    /// crypto, stock, forex, monetary, economic, geopolitical
    #[prost(string, repeated, tag = "8")]
    pub categories: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// Sentiment score -1 to 1
    #[prost(double, tag = "9")]
    pub sentiment: f64,
    /// Overall detection confidence
    #[prost(double, tag = "10")]
    pub confidence: f64,
    /// financial, political, geopolitical
    #[prost(string, tag = "11")]
    pub news_type: ::prost::alloc::string::String,
    /// high, medium, low
    #[prost(string, tag = "12")]
    pub market_impact: ::prost::alloc::string::String,
}
/// Processed event output for trading analysis - retains ALL Go service information
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ProcessedEvent {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2")]
    pub original_event: ::core::option::Option<NewsEvent>,
    #[prost(string, tag = "3")]
    pub processed_text: ::prost::alloc::string::String,
    #[prost(string, repeated, tag = "4")]
    pub tokens: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// Enhanced fields from Go service at top level for easy access
    ///
    /// Asset detection results from Go
    #[prost(message, repeated, tag = "5")]
    pub assets: ::prost::alloc::vec::Vec<AssetMatch>,
    /// Asset type classifications from Go
    #[prost(string, repeated, tag = "6")]
    pub categories: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// Sentiment from Go service
    #[prost(double, tag = "7")]
    pub sentiment_score: f64,
    /// Overall confidence from Go service
    #[prost(double, tag = "8")]
    pub confidence: f64,
    /// News classification from Go service
    #[prost(string, tag = "9")]
    pub news_type: ::prost::alloc::string::String,
    /// Market impact from Go service
    #[prost(string, tag = "10")]
    pub market_impact: ::prost::alloc::string::String,
    /// Additional ML processing fields (future use)
    ///
    /// ML-enhanced sentiment (-1.0 to 1.0)
    #[prost(double, tag = "11")]
    pub ml_sentiment_score: f64,
    /// ML processing confidence (0.0 to 1.0)
    #[prost(double, tag = "12")]
    pub ml_confidence: f64,
    /// ML-detected additional mentions
    #[prost(string, repeated, tag = "13")]
    pub asset_mentions: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// RFC3339 timestamp
    #[prost(string, tag = "14")]
    pub processed_at: ::prost::alloc::string::String,
}
/// Request/Response messages
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NewsEventRequest {
    #[prost(message, optional, tag = "1")]
    pub event: ::core::option::Option<NewsEvent>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ProcessedEventResponse {
    #[prost(message, optional, tag = "1")]
    pub processed_event: ::core::option::Option<ProcessedEvent>,
    #[prost(bool, tag = "2")]
    pub success: bool,
    #[prost(string, tag = "3")]
    pub error_message: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BatchRequest {
    #[prost(message, repeated, tag = "1")]
    pub events: ::prost::alloc::vec::Vec<NewsEvent>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BatchResponse {
    #[prost(message, repeated, tag = "1")]
    pub processed_events: ::prost::alloc::vec::Vec<ProcessedEvent>,
    #[prost(int32, tag = "2")]
    pub total_processed: i32,
    #[prost(int32, tag = "3")]
    pub total_failed: i32,
    #[prost(string, repeated, tag = "4")]
    pub error_messages: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HealthRequest {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HealthResponse {
    /// "healthy" or "unhealthy"
    #[prost(string, tag = "1")]
    pub status: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub version: ::prost::alloc::string::String,
    #[prost(int64, tag = "3")]
    pub uptime_seconds: i64,
}
/// Generated client implementations.
pub mod preprocessing_service_client {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Preprocessing service for financial news events
    #[derive(Debug, Clone)]
    pub struct PreprocessingServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl PreprocessingServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> PreprocessingServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> PreprocessingServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + Send + Sync,
        {
            PreprocessingServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Process a single news event
        pub async fn process_news_event(
            &mut self,
            request: impl tonic::IntoRequest<super::NewsEventRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ProcessedEventResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/preprocessing.PreprocessingService/ProcessNewsEvent",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "preprocessing.PreprocessingService",
                        "ProcessNewsEvent",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Process multiple events in batch
        pub async fn process_batch(
            &mut self,
            request: impl tonic::IntoRequest<super::BatchRequest>,
        ) -> std::result::Result<tonic::Response<super::BatchResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/preprocessing.PreprocessingService/ProcessBatch",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("preprocessing.PreprocessingService", "ProcessBatch"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Health check endpoint
        pub async fn health(
            &mut self,
            request: impl tonic::IntoRequest<super::HealthRequest>,
        ) -> std::result::Result<tonic::Response<super::HealthResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/preprocessing.PreprocessingService/Health",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("preprocessing.PreprocessingService", "Health"));
            self.inner.unary(req, path, codec).await
        }
    }
}
