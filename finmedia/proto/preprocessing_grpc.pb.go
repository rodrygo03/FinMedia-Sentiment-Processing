// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/preprocessing.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PreprocessingService_ProcessNewsEvent_FullMethodName = "/preprocessing.PreprocessingService/ProcessNewsEvent"
	PreprocessingService_ProcessBatch_FullMethodName     = "/preprocessing.PreprocessingService/ProcessBatch"
	PreprocessingService_Health_FullMethodName           = "/preprocessing.PreprocessingService/Health"
)

// PreprocessingServiceClient is the client API for PreprocessingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Preprocessing service for financial news events
type PreprocessingServiceClient interface {
	// Process a single news event
	ProcessNewsEvent(ctx context.Context, in *NewsEventRequest, opts ...grpc.CallOption) (*ProcessedEventResponse, error)
	// Process multiple events in batch
	ProcessBatch(ctx context.Context, in *BatchRequest, opts ...grpc.CallOption) (*BatchResponse, error)
	// Health check endpoint
	Health(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error)
}

type preprocessingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPreprocessingServiceClient(cc grpc.ClientConnInterface) PreprocessingServiceClient {
	return &preprocessingServiceClient{cc}
}

func (c *preprocessingServiceClient) ProcessNewsEvent(ctx context.Context, in *NewsEventRequest, opts ...grpc.CallOption) (*ProcessedEventResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProcessedEventResponse)
	err := c.cc.Invoke(ctx, PreprocessingService_ProcessNewsEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *preprocessingServiceClient) ProcessBatch(ctx context.Context, in *BatchRequest, opts ...grpc.CallOption) (*BatchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchResponse)
	err := c.cc.Invoke(ctx, PreprocessingService_ProcessBatch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *preprocessingServiceClient) Health(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, PreprocessingService_Health_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PreprocessingServiceServer is the server API for PreprocessingService service.
// All implementations must embed UnimplementedPreprocessingServiceServer
// for forward compatibility.
//
// Preprocessing service for financial news events
type PreprocessingServiceServer interface {
	// Process a single news event
	ProcessNewsEvent(context.Context, *NewsEventRequest) (*ProcessedEventResponse, error)
	// Process multiple events in batch
	ProcessBatch(context.Context, *BatchRequest) (*BatchResponse, error)
	// Health check endpoint
	Health(context.Context, *HealthRequest) (*HealthResponse, error)
	mustEmbedUnimplementedPreprocessingServiceServer()
}

// UnimplementedPreprocessingServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPreprocessingServiceServer struct{}

func (UnimplementedPreprocessingServiceServer) ProcessNewsEvent(context.Context, *NewsEventRequest) (*ProcessedEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessNewsEvent not implemented")
}
func (UnimplementedPreprocessingServiceServer) ProcessBatch(context.Context, *BatchRequest) (*BatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessBatch not implemented")
}
func (UnimplementedPreprocessingServiceServer) Health(context.Context, *HealthRequest) (*HealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Health not implemented")
}
func (UnimplementedPreprocessingServiceServer) mustEmbedUnimplementedPreprocessingServiceServer() {}
func (UnimplementedPreprocessingServiceServer) testEmbeddedByValue()                              {}

// UnsafePreprocessingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PreprocessingServiceServer will
// result in compilation errors.
type UnsafePreprocessingServiceServer interface {
	mustEmbedUnimplementedPreprocessingServiceServer()
}

func RegisterPreprocessingServiceServer(s grpc.ServiceRegistrar, srv PreprocessingServiceServer) {
	// If the following call pancis, it indicates UnimplementedPreprocessingServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PreprocessingService_ServiceDesc, srv)
}

func _PreprocessingService_ProcessNewsEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewsEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PreprocessingServiceServer).ProcessNewsEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PreprocessingService_ProcessNewsEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PreprocessingServiceServer).ProcessNewsEvent(ctx, req.(*NewsEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PreprocessingService_ProcessBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PreprocessingServiceServer).ProcessBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PreprocessingService_ProcessBatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PreprocessingServiceServer).ProcessBatch(ctx, req.(*BatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PreprocessingService_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PreprocessingServiceServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PreprocessingService_Health_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PreprocessingServiceServer).Health(ctx, req.(*HealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PreprocessingService_ServiceDesc is the grpc.ServiceDesc for PreprocessingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PreprocessingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "preprocessing.PreprocessingService",
	HandlerType: (*PreprocessingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProcessNewsEvent",
			Handler:    _PreprocessingService_ProcessNewsEvent_Handler,
		},
		{
			MethodName: "ProcessBatch",
			Handler:    _PreprocessingService_ProcessBatch_Handler,
		},
		{
			MethodName: "Health",
			Handler:    _PreprocessingService_Health_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/preprocessing.proto",
}
