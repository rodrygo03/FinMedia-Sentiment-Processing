// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: proto/preprocessing.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Asset match information from Go asset detector
type AssetMatch struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Symbol        string                 `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`           // BTC, AAPL, etc.
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`               // Bitcoin, Apple Inc.
	Type          string                 `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`               // crypto, stock, etf, monetary, economic, geopolitical
	Confidence    float64                `protobuf:"fixed64,4,opt,name=confidence,proto3" json:"confidence,omitempty"` // Detection confidence 0.0-1.0
	Contexts      []string               `protobuf:"bytes,5,rep,name=contexts,proto3" json:"contexts,omitempty"`       // Context snippets around matches
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AssetMatch) Reset() {
	*x = AssetMatch{}
	mi := &file_proto_preprocessing_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssetMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetMatch) ProtoMessage() {}

func (x *AssetMatch) ProtoReflect() protoreflect.Message {
	mi := &file_proto_preprocessing_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetMatch.ProtoReflect.Descriptor instead.
func (*AssetMatch) Descriptor() ([]byte, []int) {
	return file_proto_preprocessing_proto_rawDescGZIP(), []int{0}
}

func (x *AssetMatch) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *AssetMatch) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AssetMatch) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *AssetMatch) GetConfidence() float64 {
	if x != nil {
		return x.Confidence
	}
	return 0
}

func (x *AssetMatch) GetContexts() []string {
	if x != nil {
		return x.Contexts
	}
	return nil
}

// News event from Go finmedia service with complete asset detection
type NewsEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Title         string                 `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Content       string                 `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	PublishedAt   string                 `protobuf:"bytes,4,opt,name=published_at,json=publishedAt,proto3" json:"published_at,omitempty"` // RFC3339 timestamp
	Source        string                 `protobuf:"bytes,5,opt,name=source,proto3" json:"source,omitempty"`
	Url           string                 `protobuf:"bytes,6,opt,name=url,proto3" json:"url,omitempty"`
	Assets        []*AssetMatch          `protobuf:"bytes,7,rep,name=assets,proto3" json:"assets,omitempty"`                                  // Asset detection results
	Categories    []string               `protobuf:"bytes,8,rep,name=categories,proto3" json:"categories,omitempty"`                          // crypto, stock, forex, monetary, economic, geopolitical
	Sentiment     float64                `protobuf:"fixed64,9,opt,name=sentiment,proto3" json:"sentiment,omitempty"`                          // Sentiment score -1 to 1
	Confidence    float64                `protobuf:"fixed64,10,opt,name=confidence,proto3" json:"confidence,omitempty"`                       // Overall detection confidence
	NewsType      string                 `protobuf:"bytes,11,opt,name=news_type,json=newsType,proto3" json:"news_type,omitempty"`             // financial, political, geopolitical
	MarketImpact  string                 `protobuf:"bytes,12,opt,name=market_impact,json=marketImpact,proto3" json:"market_impact,omitempty"` // high, medium, low
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NewsEvent) Reset() {
	*x = NewsEvent{}
	mi := &file_proto_preprocessing_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NewsEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewsEvent) ProtoMessage() {}

func (x *NewsEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_preprocessing_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewsEvent.ProtoReflect.Descriptor instead.
func (*NewsEvent) Descriptor() ([]byte, []int) {
	return file_proto_preprocessing_proto_rawDescGZIP(), []int{1}
}

func (x *NewsEvent) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *NewsEvent) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *NewsEvent) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *NewsEvent) GetPublishedAt() string {
	if x != nil {
		return x.PublishedAt
	}
	return ""
}

func (x *NewsEvent) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *NewsEvent) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *NewsEvent) GetAssets() []*AssetMatch {
	if x != nil {
		return x.Assets
	}
	return nil
}

func (x *NewsEvent) GetCategories() []string {
	if x != nil {
		return x.Categories
	}
	return nil
}

func (x *NewsEvent) GetSentiment() float64 {
	if x != nil {
		return x.Sentiment
	}
	return 0
}

func (x *NewsEvent) GetConfidence() float64 {
	if x != nil {
		return x.Confidence
	}
	return 0
}

func (x *NewsEvent) GetNewsType() string {
	if x != nil {
		return x.NewsType
	}
	return ""
}

func (x *NewsEvent) GetMarketImpact() string {
	if x != nil {
		return x.MarketImpact
	}
	return ""
}

// Processed event output for trading analysis - retains ALL Go service information
type ProcessedEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	OriginalEvent *NewsEvent             `protobuf:"bytes,2,opt,name=original_event,json=originalEvent,proto3" json:"original_event,omitempty"`
	ProcessedText string                 `protobuf:"bytes,3,opt,name=processed_text,json=processedText,proto3" json:"processed_text,omitempty"`
	Tokens        []string               `protobuf:"bytes,4,rep,name=tokens,proto3" json:"tokens,omitempty"`
	// Enhanced fields from Go service at top level for easy access
	Assets         []*AssetMatch `protobuf:"bytes,5,rep,name=assets,proto3" json:"assets,omitempty"`                                         // Asset detection results from Go
	Categories     []string      `protobuf:"bytes,6,rep,name=categories,proto3" json:"categories,omitempty"`                                 // Asset type classifications from Go
	SentimentScore float64       `protobuf:"fixed64,7,opt,name=sentiment_score,json=sentimentScore,proto3" json:"sentiment_score,omitempty"` // Sentiment from Go service
	Confidence     float64       `protobuf:"fixed64,8,opt,name=confidence,proto3" json:"confidence,omitempty"`                               // Overall confidence from Go service
	NewsType       string        `protobuf:"bytes,9,opt,name=news_type,json=newsType,proto3" json:"news_type,omitempty"`                     // News classification from Go service
	MarketImpact   string        `protobuf:"bytes,10,opt,name=market_impact,json=marketImpact,proto3" json:"market_impact,omitempty"`        // Market impact from Go service
	// Additional ML processing fields (future use)
	MlSentimentScore float64  `protobuf:"fixed64,11,opt,name=ml_sentiment_score,json=mlSentimentScore,proto3" json:"ml_sentiment_score,omitempty"` // ML-enhanced sentiment (-1.0 to 1.0)
	MlConfidence     float64  `protobuf:"fixed64,12,opt,name=ml_confidence,json=mlConfidence,proto3" json:"ml_confidence,omitempty"`               // ML processing confidence (0.0 to 1.0)
	AssetMentions    []string `protobuf:"bytes,13,rep,name=asset_mentions,json=assetMentions,proto3" json:"asset_mentions,omitempty"`              // ML-detected additional mentions
	ProcessedAt      string   `protobuf:"bytes,14,opt,name=processed_at,json=processedAt,proto3" json:"processed_at,omitempty"`                    // RFC3339 timestamp
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ProcessedEvent) Reset() {
	*x = ProcessedEvent{}
	mi := &file_proto_preprocessing_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProcessedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessedEvent) ProtoMessage() {}

func (x *ProcessedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_preprocessing_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessedEvent.ProtoReflect.Descriptor instead.
func (*ProcessedEvent) Descriptor() ([]byte, []int) {
	return file_proto_preprocessing_proto_rawDescGZIP(), []int{2}
}

func (x *ProcessedEvent) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ProcessedEvent) GetOriginalEvent() *NewsEvent {
	if x != nil {
		return x.OriginalEvent
	}
	return nil
}

func (x *ProcessedEvent) GetProcessedText() string {
	if x != nil {
		return x.ProcessedText
	}
	return ""
}

func (x *ProcessedEvent) GetTokens() []string {
	if x != nil {
		return x.Tokens
	}
	return nil
}

func (x *ProcessedEvent) GetAssets() []*AssetMatch {
	if x != nil {
		return x.Assets
	}
	return nil
}

func (x *ProcessedEvent) GetCategories() []string {
	if x != nil {
		return x.Categories
	}
	return nil
}

func (x *ProcessedEvent) GetSentimentScore() float64 {
	if x != nil {
		return x.SentimentScore
	}
	return 0
}

func (x *ProcessedEvent) GetConfidence() float64 {
	if x != nil {
		return x.Confidence
	}
	return 0
}

func (x *ProcessedEvent) GetNewsType() string {
	if x != nil {
		return x.NewsType
	}
	return ""
}

func (x *ProcessedEvent) GetMarketImpact() string {
	if x != nil {
		return x.MarketImpact
	}
	return ""
}

func (x *ProcessedEvent) GetMlSentimentScore() float64 {
	if x != nil {
		return x.MlSentimentScore
	}
	return 0
}

func (x *ProcessedEvent) GetMlConfidence() float64 {
	if x != nil {
		return x.MlConfidence
	}
	return 0
}

func (x *ProcessedEvent) GetAssetMentions() []string {
	if x != nil {
		return x.AssetMentions
	}
	return nil
}

func (x *ProcessedEvent) GetProcessedAt() string {
	if x != nil {
		return x.ProcessedAt
	}
	return ""
}

// Request/Response messages
type NewsEventRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Event         *NewsEvent             `protobuf:"bytes,1,opt,name=event,proto3" json:"event,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NewsEventRequest) Reset() {
	*x = NewsEventRequest{}
	mi := &file_proto_preprocessing_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NewsEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewsEventRequest) ProtoMessage() {}

func (x *NewsEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_preprocessing_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewsEventRequest.ProtoReflect.Descriptor instead.
func (*NewsEventRequest) Descriptor() ([]byte, []int) {
	return file_proto_preprocessing_proto_rawDescGZIP(), []int{3}
}

func (x *NewsEventRequest) GetEvent() *NewsEvent {
	if x != nil {
		return x.Event
	}
	return nil
}

type ProcessedEventResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	ProcessedEvent *ProcessedEvent        `protobuf:"bytes,1,opt,name=processed_event,json=processedEvent,proto3" json:"processed_event,omitempty"`
	Success        bool                   `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	ErrorMessage   string                 `protobuf:"bytes,3,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ProcessedEventResponse) Reset() {
	*x = ProcessedEventResponse{}
	mi := &file_proto_preprocessing_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProcessedEventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessedEventResponse) ProtoMessage() {}

func (x *ProcessedEventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_preprocessing_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessedEventResponse.ProtoReflect.Descriptor instead.
func (*ProcessedEventResponse) Descriptor() ([]byte, []int) {
	return file_proto_preprocessing_proto_rawDescGZIP(), []int{4}
}

func (x *ProcessedEventResponse) GetProcessedEvent() *ProcessedEvent {
	if x != nil {
		return x.ProcessedEvent
	}
	return nil
}

func (x *ProcessedEventResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ProcessedEventResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

type BatchRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Events        []*NewsEvent           `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchRequest) Reset() {
	*x = BatchRequest{}
	mi := &file_proto_preprocessing_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchRequest) ProtoMessage() {}

func (x *BatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_preprocessing_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchRequest.ProtoReflect.Descriptor instead.
func (*BatchRequest) Descriptor() ([]byte, []int) {
	return file_proto_preprocessing_proto_rawDescGZIP(), []int{5}
}

func (x *BatchRequest) GetEvents() []*NewsEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

type BatchResponse struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	ProcessedEvents []*ProcessedEvent      `protobuf:"bytes,1,rep,name=processed_events,json=processedEvents,proto3" json:"processed_events,omitempty"`
	TotalProcessed  int32                  `protobuf:"varint,2,opt,name=total_processed,json=totalProcessed,proto3" json:"total_processed,omitempty"`
	TotalFailed     int32                  `protobuf:"varint,3,opt,name=total_failed,json=totalFailed,proto3" json:"total_failed,omitempty"`
	ErrorMessages   []string               `protobuf:"bytes,4,rep,name=error_messages,json=errorMessages,proto3" json:"error_messages,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *BatchResponse) Reset() {
	*x = BatchResponse{}
	mi := &file_proto_preprocessing_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchResponse) ProtoMessage() {}

func (x *BatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_preprocessing_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchResponse.ProtoReflect.Descriptor instead.
func (*BatchResponse) Descriptor() ([]byte, []int) {
	return file_proto_preprocessing_proto_rawDescGZIP(), []int{6}
}

func (x *BatchResponse) GetProcessedEvents() []*ProcessedEvent {
	if x != nil {
		return x.ProcessedEvents
	}
	return nil
}

func (x *BatchResponse) GetTotalProcessed() int32 {
	if x != nil {
		return x.TotalProcessed
	}
	return 0
}

func (x *BatchResponse) GetTotalFailed() int32 {
	if x != nil {
		return x.TotalFailed
	}
	return 0
}

func (x *BatchResponse) GetErrorMessages() []string {
	if x != nil {
		return x.ErrorMessages
	}
	return nil
}

type HealthRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HealthRequest) Reset() {
	*x = HealthRequest{}
	mi := &file_proto_preprocessing_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HealthRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthRequest) ProtoMessage() {}

func (x *HealthRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_preprocessing_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthRequest.ProtoReflect.Descriptor instead.
func (*HealthRequest) Descriptor() ([]byte, []int) {
	return file_proto_preprocessing_proto_rawDescGZIP(), []int{7}
}

type HealthResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        string                 `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"` // "healthy" or "unhealthy"
	Version       string                 `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	UptimeSeconds int64                  `protobuf:"varint,3,opt,name=uptime_seconds,json=uptimeSeconds,proto3" json:"uptime_seconds,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HealthResponse) Reset() {
	*x = HealthResponse{}
	mi := &file_proto_preprocessing_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HealthResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthResponse) ProtoMessage() {}

func (x *HealthResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_preprocessing_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthResponse.ProtoReflect.Descriptor instead.
func (*HealthResponse) Descriptor() ([]byte, []int) {
	return file_proto_preprocessing_proto_rawDescGZIP(), []int{8}
}

func (x *HealthResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *HealthResponse) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *HealthResponse) GetUptimeSeconds() int64 {
	if x != nil {
		return x.UptimeSeconds
	}
	return 0
}

var File_proto_preprocessing_proto protoreflect.FileDescriptor

const file_proto_preprocessing_proto_rawDesc = "" +
	"\n" +
	"\x19proto/preprocessing.proto\x12\rpreprocessing\"\x88\x01\n" +
	"\n" +
	"AssetMatch\x12\x16\n" +
	"\x06symbol\x18\x01 \x01(\tR\x06symbol\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x12\n" +
	"\x04type\x18\x03 \x01(\tR\x04type\x12\x1e\n" +
	"\n" +
	"confidence\x18\x04 \x01(\x01R\n" +
	"confidence\x12\x1a\n" +
	"\bcontexts\x18\x05 \x03(\tR\bcontexts\"\xeb\x02\n" +
	"\tNewsEvent\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x14\n" +
	"\x05title\x18\x02 \x01(\tR\x05title\x12\x18\n" +
	"\acontent\x18\x03 \x01(\tR\acontent\x12!\n" +
	"\fpublished_at\x18\x04 \x01(\tR\vpublishedAt\x12\x16\n" +
	"\x06source\x18\x05 \x01(\tR\x06source\x12\x10\n" +
	"\x03url\x18\x06 \x01(\tR\x03url\x121\n" +
	"\x06assets\x18\a \x03(\v2\x19.preprocessing.AssetMatchR\x06assets\x12\x1e\n" +
	"\n" +
	"categories\x18\b \x03(\tR\n" +
	"categories\x12\x1c\n" +
	"\tsentiment\x18\t \x01(\x01R\tsentiment\x12\x1e\n" +
	"\n" +
	"confidence\x18\n" +
	" \x01(\x01R\n" +
	"confidence\x12\x1b\n" +
	"\tnews_type\x18\v \x01(\tR\bnewsType\x12#\n" +
	"\rmarket_impact\x18\f \x01(\tR\fmarketImpact\"\x9b\x04\n" +
	"\x0eProcessedEvent\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12?\n" +
	"\x0eoriginal_event\x18\x02 \x01(\v2\x18.preprocessing.NewsEventR\roriginalEvent\x12%\n" +
	"\x0eprocessed_text\x18\x03 \x01(\tR\rprocessedText\x12\x16\n" +
	"\x06tokens\x18\x04 \x03(\tR\x06tokens\x121\n" +
	"\x06assets\x18\x05 \x03(\v2\x19.preprocessing.AssetMatchR\x06assets\x12\x1e\n" +
	"\n" +
	"categories\x18\x06 \x03(\tR\n" +
	"categories\x12'\n" +
	"\x0fsentiment_score\x18\a \x01(\x01R\x0esentimentScore\x12\x1e\n" +
	"\n" +
	"confidence\x18\b \x01(\x01R\n" +
	"confidence\x12\x1b\n" +
	"\tnews_type\x18\t \x01(\tR\bnewsType\x12#\n" +
	"\rmarket_impact\x18\n" +
	" \x01(\tR\fmarketImpact\x12,\n" +
	"\x12ml_sentiment_score\x18\v \x01(\x01R\x10mlSentimentScore\x12#\n" +
	"\rml_confidence\x18\f \x01(\x01R\fmlConfidence\x12%\n" +
	"\x0easset_mentions\x18\r \x03(\tR\rassetMentions\x12!\n" +
	"\fprocessed_at\x18\x0e \x01(\tR\vprocessedAt\"B\n" +
	"\x10NewsEventRequest\x12.\n" +
	"\x05event\x18\x01 \x01(\v2\x18.preprocessing.NewsEventR\x05event\"\x9f\x01\n" +
	"\x16ProcessedEventResponse\x12F\n" +
	"\x0fprocessed_event\x18\x01 \x01(\v2\x1d.preprocessing.ProcessedEventR\x0eprocessedEvent\x12\x18\n" +
	"\asuccess\x18\x02 \x01(\bR\asuccess\x12#\n" +
	"\rerror_message\x18\x03 \x01(\tR\ferrorMessage\"@\n" +
	"\fBatchRequest\x120\n" +
	"\x06events\x18\x01 \x03(\v2\x18.preprocessing.NewsEventR\x06events\"\xcc\x01\n" +
	"\rBatchResponse\x12H\n" +
	"\x10processed_events\x18\x01 \x03(\v2\x1d.preprocessing.ProcessedEventR\x0fprocessedEvents\x12'\n" +
	"\x0ftotal_processed\x18\x02 \x01(\x05R\x0etotalProcessed\x12!\n" +
	"\ftotal_failed\x18\x03 \x01(\x05R\vtotalFailed\x12%\n" +
	"\x0eerror_messages\x18\x04 \x03(\tR\rerrorMessages\"\x0f\n" +
	"\rHealthRequest\"i\n" +
	"\x0eHealthResponse\x12\x16\n" +
	"\x06status\x18\x01 \x01(\tR\x06status\x12\x18\n" +
	"\aversion\x18\x02 \x01(\tR\aversion\x12%\n" +
	"\x0euptime_seconds\x18\x03 \x01(\x03R\ruptimeSeconds2\x84\x02\n" +
	"\x14PreprocessingService\x12Z\n" +
	"\x10ProcessNewsEvent\x12\x1f.preprocessing.NewsEventRequest\x1a%.preprocessing.ProcessedEventResponse\x12I\n" +
	"\fProcessBatch\x12\x1b.preprocessing.BatchRequest\x1a\x1c.preprocessing.BatchResponse\x12E\n" +
	"\x06Health\x12\x1c.preprocessing.HealthRequest\x1a\x1d.preprocessing.HealthResponseB\x10Z\x0efinmedia/protob\x06proto3"

var (
	file_proto_preprocessing_proto_rawDescOnce sync.Once
	file_proto_preprocessing_proto_rawDescData []byte
)

func file_proto_preprocessing_proto_rawDescGZIP() []byte {
	file_proto_preprocessing_proto_rawDescOnce.Do(func() {
		file_proto_preprocessing_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_preprocessing_proto_rawDesc), len(file_proto_preprocessing_proto_rawDesc)))
	})
	return file_proto_preprocessing_proto_rawDescData
}

var file_proto_preprocessing_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_proto_preprocessing_proto_goTypes = []any{
	(*AssetMatch)(nil),             // 0: preprocessing.AssetMatch
	(*NewsEvent)(nil),              // 1: preprocessing.NewsEvent
	(*ProcessedEvent)(nil),         // 2: preprocessing.ProcessedEvent
	(*NewsEventRequest)(nil),       // 3: preprocessing.NewsEventRequest
	(*ProcessedEventResponse)(nil), // 4: preprocessing.ProcessedEventResponse
	(*BatchRequest)(nil),           // 5: preprocessing.BatchRequest
	(*BatchResponse)(nil),          // 6: preprocessing.BatchResponse
	(*HealthRequest)(nil),          // 7: preprocessing.HealthRequest
	(*HealthResponse)(nil),         // 8: preprocessing.HealthResponse
}
var file_proto_preprocessing_proto_depIdxs = []int32{
	0,  // 0: preprocessing.NewsEvent.assets:type_name -> preprocessing.AssetMatch
	1,  // 1: preprocessing.ProcessedEvent.original_event:type_name -> preprocessing.NewsEvent
	0,  // 2: preprocessing.ProcessedEvent.assets:type_name -> preprocessing.AssetMatch
	1,  // 3: preprocessing.NewsEventRequest.event:type_name -> preprocessing.NewsEvent
	2,  // 4: preprocessing.ProcessedEventResponse.processed_event:type_name -> preprocessing.ProcessedEvent
	1,  // 5: preprocessing.BatchRequest.events:type_name -> preprocessing.NewsEvent
	2,  // 6: preprocessing.BatchResponse.processed_events:type_name -> preprocessing.ProcessedEvent
	3,  // 7: preprocessing.PreprocessingService.ProcessNewsEvent:input_type -> preprocessing.NewsEventRequest
	5,  // 8: preprocessing.PreprocessingService.ProcessBatch:input_type -> preprocessing.BatchRequest
	7,  // 9: preprocessing.PreprocessingService.Health:input_type -> preprocessing.HealthRequest
	4,  // 10: preprocessing.PreprocessingService.ProcessNewsEvent:output_type -> preprocessing.ProcessedEventResponse
	6,  // 11: preprocessing.PreprocessingService.ProcessBatch:output_type -> preprocessing.BatchResponse
	8,  // 12: preprocessing.PreprocessingService.Health:output_type -> preprocessing.HealthResponse
	10, // [10:13] is the sub-list for method output_type
	7,  // [7:10] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_proto_preprocessing_proto_init() }
func file_proto_preprocessing_proto_init() {
	if File_proto_preprocessing_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_preprocessing_proto_rawDesc), len(file_proto_preprocessing_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_preprocessing_proto_goTypes,
		DependencyIndexes: file_proto_preprocessing_proto_depIdxs,
		MessageInfos:      file_proto_preprocessing_proto_msgTypes,
	}.Build()
	File_proto_preprocessing_proto = out.File
	file_proto_preprocessing_proto_goTypes = nil
	file_proto_preprocessing_proto_depIdxs = nil
}
